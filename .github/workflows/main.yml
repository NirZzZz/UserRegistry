name: CI Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        ports:
          - "${{ secrets.DATABASE_PORT }}:${{ secrets.DATABASE_PORT }}"
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          MYSQL_DATABASE: users

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create .env file
      run: |
        echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
        echo "DATABASE_PORT: ${{ secrets.DATABASE_PORT }} >> .env
        echo "DATABASE_USER: ${{ secrets.DATABASE_USER }} >> .env
        echo "DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }} >> .env
        echo "DATABASE_HOST=${{ secrets.HOST }}" >> .env
        echo "DATABASE_HOST=${{ secrets.DATABASE_PORT }} >> .env
        echo "DATABASE_HOST=${{ secrets.DATABASE_USER }} >> .env
        echo "DATABASE_HOST=${{ secrets.DATABASE_PASSWORD }} >> .env
        echo "DATABASE_HOST=${{ secrets.REST_PORT }} >> .env
        echo "DATABASE_HOST=${{ secrets.WEB_PORT }} >> .env
        echo "DATABASE_HOST=${{ secrets.REST_URL }} >> .env
        echo "DATABASE_HOST=${{ secrets.WEB_URL }} >> .env

    - name: Build Docker containers
      run: |
        docker-compose down -v || true
        docker-compose build
        docker-compose up -d

    - name: Wait for services to be up
      run: |
        docker-compose run db-init bash -c "while ! nc -z db ${{ secrets.DATABASE_PORT }}; do sleep 1; done"

    - name: Check Docker Compose Logs
      run: |
        docker-compose logs

    - name: Check if Flask is accessible
      run: |
        echo "Checking Flask application status..."
        curl ${{ secrets.REST_URL }} || echo "Flask app is not accessible on ${{ secrets.REST_URL }}"

    - name: Print workspace directory structure
      run: |
        ls -R

    - name: Add debugging to the test script
      run: |
        # Inject debugging code into combined_testing.py
        echo "Adding debug logging to combined_testing.py"
        sed -i '1 i\import logging\nlogging.basicConfig(level=logging.DEBUG)' tests/combined_testing.py

    - name: Run combined tests
      run: |
        echo "Running combined tests with additional debug logging"
        python tests/combined_testing.py || {
          echo "Test failed! Capturing traceback.";
          cat tests/combined_testing.py;
          exit 1;
        }

    - name: Clean up Docker containers
      if: always()
      run: |
        docker-compose down -v
