name: CI Pipeline

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_HOST: ${{ secrets.HOST }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      HOST: ${{ secrets.HOST }}
      REST_PORT: ${{ secrets.REST_PORT }}
      WEB_PORT: ${{ secrets.WEB_PORT }}
      REST_URL: ${{ secrets.REST_URL }}
      WEB_URL: ${{ secrets.WEB_URL }}

    services:
      db:
        image: mysql:8.0
        ports:
          - 3307:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          MYSQL_DATABASE: users

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create .env file
      run: |
        echo DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" >> .env
        echo DATABASE_HOST="${{ secrets.HOST }}" >> .env
        echo DATABASE_PORT="${{ secrets.DATABASE_PORT }}" >> .env
        echo DATABASE_USER="${{ secrets.DATABASE_USER }}" >> .env
        echo HOST="${{ secrets.HOST }}" >> .env
        echo REST_PORT="${{ secrets.REST_PORT }}" >> .env
        echo WEB_PORT="${{ secrets.WEB_PORT }}" >> .env
        echo REST_URL="${{ secrets.REST_URL }}" >> .env
        echo WEB_URL="${{ secrets.WEB_URL }}" >> .env

    - name: Build Docker containers
      run: |
        docker-compose down -v || true
        docker-compose build
        docker-compose up -d

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install chromedriver-py

    - name: Check Docker Compose Logs
      run: |
        docker-compose logs

    - name: Run combined tests
      env:
        PYTHONPATH: "${{ github.workspace }}"
      run: |
        python tests/combined_testing.py

    - name: Push Docker image to DockerHub
      run: |
        docker tag $DOCKER_IMAGE ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE:v1
        docker push ${{ secrets.DOCKER_USERNAME }}/$DOCKER_IMAGE:v1

    - name: Clean up Docker containers
      if: always()
      run: |
        docker-compose down -v
